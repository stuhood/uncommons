/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.twitter.scrooge.integration_apache;

import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;

public class bonk_or_bool_union extends org.apache.thrift.TUnion<bonk_or_bool_union, bonk_or_bool_union._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bonk_or_bool_union");
  private static final org.apache.thrift.protocol.TField BONK_FIELD_DESC = new org.apache.thrift.protocol.TField("bonk", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BOOL_THING_FIELD_DESC = new org.apache.thrift.protocol.TField("bool_thing", org.apache.thrift.protocol.TType.BOOL, (short)2);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BONK((short)1, "bonk"),
    BOOL_THING((short)2, "bool_thing");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BONK
          return BONK;
        case 2: // BOOL_THING
          return BOOL_THING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BONK, new org.apache.thrift.meta_data.FieldMetaData("bonk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Bonk_struct.class)));
    tmpMap.put(_Fields.BOOL_THING, new org.apache.thrift.meta_data.FieldMetaData("bool_thing", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bonk_or_bool_union.class, metaDataMap);
  }

  public bonk_or_bool_union() {
    super();
  }

  public bonk_or_bool_union(_Fields setField, Object value) {
    super(setField, value);
  }

  public bonk_or_bool_union(bonk_or_bool_union other) {
    super(other);
  }
  public bonk_or_bool_union deepCopy() {
    return new bonk_or_bool_union(this);
  }

  public static bonk_or_bool_union bonk(Bonk_struct value) {
    bonk_or_bool_union x = new bonk_or_bool_union();
    x.setBonk(value);
    return x;
  }

  public static bonk_or_bool_union bool_thing(boolean value) {
    bonk_or_bool_union x = new bonk_or_bool_union();
    x.setBool_thing(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case BONK:
        if (value instanceof Bonk_struct) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Bonk_struct for field 'bonk', but got " + value.getClass().getSimpleName());
      case BOOL_THING:
        if (value instanceof Boolean) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Boolean for field 'bool_thing', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case BONK:
          if (field.type == BONK_FIELD_DESC.type) {
            Bonk_struct bonk;
            bonk = new Bonk_struct();
            bonk.read(iprot);
            return bonk;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case BOOL_THING:
          if (field.type == BOOL_THING_FIELD_DESC.type) {
            Boolean bool_thing;
            bool_thing = iprot.readBool();
            return bool_thing;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case BONK:
        Bonk_struct bonk = (Bonk_struct)value_;
        bonk.write(oprot);
        return;
      case BOOL_THING:
        Boolean bool_thing = (Boolean)value_;
        oprot.writeBool(bool_thing);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case BONK:
          Bonk_struct bonk;
          bonk = new Bonk_struct();
          bonk.read(iprot);
          return bonk;
        case BOOL_THING:
          Boolean bool_thing;
          bool_thing = iprot.readBool();
          return bool_thing;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case BONK:
        Bonk_struct bonk = (Bonk_struct)value_;
        bonk.write(oprot);
        return;
      case BOOL_THING:
        Boolean bool_thing = (Boolean)value_;
        oprot.writeBool(bool_thing);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case BONK:
        return BONK_FIELD_DESC;
      case BOOL_THING:
        return BOOL_THING_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public Bonk_struct getBonk() {
    if (getSetField() == _Fields.BONK) {
      return (Bonk_struct)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'bonk' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBonk(Bonk_struct value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.BONK;
    value_ = value;
  }

  public boolean getBool_thing() {
    if (getSetField() == _Fields.BOOL_THING) {
      return (Boolean)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'bool_thing' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setBool_thing(boolean value) {
    setField_ = _Fields.BOOL_THING;
    value_ = value;
  }

  public boolean isSetBonk() {
    return setField_ == _Fields.BONK;
  }


  public boolean isSetBool_thing() {
    return setField_ == _Fields.BOOL_THING;
  }


  public boolean equals(Object other) {
    if (other instanceof bonk_or_bool_union) {
      return equals((bonk_or_bool_union)other);
    } else {
      return false;
    }
  }

  public boolean equals(bonk_or_bool_union other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(bonk_or_bool_union other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  /**
   * If you'd like this to perform more respectably, use the hashcode generator option.
   */
  @Override
  public int hashCode() {
    return 0;
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
