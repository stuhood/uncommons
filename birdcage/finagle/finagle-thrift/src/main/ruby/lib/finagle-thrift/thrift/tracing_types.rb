#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#


module FinagleThrift
    class Endpoint
      include ::Thrift::Struct, ::Thrift::Struct_Union
      IPV4 = 1
      PORT = 2
      SERVICE_NAME = 3

      FIELDS = {
        IPV4 => {:type => ::Thrift::Types::I32, :name => 'ipv4'},
        PORT => {:type => ::Thrift::Types::I16, :name => 'port'},
        SERVICE_NAME => {:type => ::Thrift::Types::STRING, :name => 'service_name'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Annotation
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TIMESTAMP = 1
      VALUE = 2
      HOST = 3

      FIELDS = {
        TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'},
        VALUE => {:type => ::Thrift::Types::STRING, :name => 'value'},
        HOST => {:type => ::Thrift::Types::STRUCT, :name => 'host', :class => FinagleThrift::Endpoint, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Span
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TRACE_ID = 1
      NAME = 3
      ID = 4
      PARENT_ID = 5
      ANNOTATIONS = 6
      BINARY_ANNOTATIONS = 7

      FIELDS = {
        TRACE_ID => {:type => ::Thrift::Types::I64, :name => 'trace_id'},
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
        ID => {:type => ::Thrift::Types::I64, :name => 'id'},
        PARENT_ID => {:type => ::Thrift::Types::I64, :name => 'parent_id', :optional => true},
        ANNOTATIONS => {:type => ::Thrift::Types::LIST, :name => 'annotations', :element => {:type => ::Thrift::Types::STRUCT, :class => FinagleThrift::Annotation}},
        BINARY_ANNOTATIONS => {:type => ::Thrift::Types::MAP, :name => 'binary_annotations', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING, :binary => true}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    # At connection time, we can let the server know who we are so
    # they can book keep and optionally reject unknown clients.
    class ClientId
      include ::Thrift::Struct, ::Thrift::Struct_Union
      NAME = 1

      FIELDS = {
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    # RequestHeader defines headers for the request. These carry the span data, and
    # a flag indicating whether the request is to be debugged.
    class RequestHeader
      include ::Thrift::Struct, ::Thrift::Struct_Union
      TRACE_ID = 1
      SPAN_ID = 2
      PARENT_SPAN_ID = 3
      DEBUG = 4
      SAMPLED = 5
      CLIENT_ID = 6

      FIELDS = {
        TRACE_ID => {:type => ::Thrift::Types::I64, :name => 'trace_id'},
        SPAN_ID => {:type => ::Thrift::Types::I64, :name => 'span_id'},
        PARENT_SPAN_ID => {:type => ::Thrift::Types::I64, :name => 'parent_span_id', :optional => true},
        DEBUG => {:type => ::Thrift::Types::BOOL, :name => 'debug'},
        SAMPLED => {:type => ::Thrift::Types::BOOL, :name => 'sampled', :optional => true},
        CLIENT_ID => {:type => ::Thrift::Types::STRUCT, :name => 'client_id', :class => FinagleThrift::ClientId, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    # The Response carries a reply header for tracing. These are
    # empty unless the request is being debugged, in which case a
    # transcript is copied.
    class ResponseHeader
      include ::Thrift::Struct, ::Thrift::Struct_Union
      SPANS = 1

      FIELDS = {
        SPANS => {:type => ::Thrift::Types::LIST, :name => 'spans', :element => {:type => ::Thrift::Types::STRUCT, :class => FinagleThrift::Span}}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    # These are connection-level options negotiated during protocol
    # upgrade.
    class ConnectionOptions
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    # This is the struct that a successful upgrade will reply with.
    class UpgradeReply
      include ::Thrift::Struct, ::Thrift::Struct_Union

      FIELDS = {

      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
